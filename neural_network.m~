% Author: Max Lu
% Date: Nov 19

% add lib path:
addpath('./liblinear');

% Load the data first, see prepare_data.
if exist('genders_train','var')~= 1
prepare_data;
load('train/genders_train.mat', 'genders_train');
load('train/images_train.mat', 'images_train');
load('train/image_features_train.mat', 'image_features_train');
load('train/words_train.mat', 'words_train');
load('test/images_test.mat', 'images_test');
load('test/image_features_test.mat', 'image_features_test');
load('test/words_test.mat', 'words_test');
end

% Prepare/Load PCA-ed data,  
if exist('eigens','var')~= 1
    if exist('coef.mat','file') ~= 2 
        X = [words_train, image_features_train; words_test, image_features_test]; 
        [coef, scores, eigens] = pca(X);
        save('coef.mat', 'coef');
        save('scores.mat', 'scores');
        save('eigens.mat', 'eigens');
    else 
        load('coef.mat', 'coef');
        load('scores.mat', 'scores');
        load('eigens.mat', 'eigens');
    end
end

%%

addpath('./DL_toolbox/util','./DL_toolbox/NN','./DL_toolbox/DBN');
% X = normc(X);
Y = genders_train;
[n m] = size(words_train);

X = [words_train, image_features_train; words_test, image_features_test];
% % X = normc(X);
Y = genders_train;

% X = X(1:n, :);
X = scores(1:n, 1:1000);


train_x = X;
train_y = Y;



rand('state',0)

nn = nnsetup([1000 100 2]);
nn.weightPenaltyL2 = 1e-2;  %  L2 weight decay
opts.numepochs =  25;        %  Number of full sweeps through data
opts.batchsize = 100;       %  Take a mean gradient step over this many samples

[nn loss] = nntrain(nn, train_x, train_y, opts);
% new_feat = nnpredict(nn, train_x);

[er, bad] = nntest(nn, test_x, test_y);
disp(er);


